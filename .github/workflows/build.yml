name: Build
on:
  # push:
  #   branches: [ main ]
  #   tags:
  #     - '[0-9]+.[0-9]+.[0-9]+**' # this one will trigger a release
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:

env:
  # Preview mode: Publishes the build output as a CI artifact instead of creating
  # a release, allowing for manual inspection of the output. This mode is
  # activated if the CI run was triggered by events other than pushed tags
  preview: ${{ !startsWith(github.ref, 'refs/tags/') }}
  pre-release: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
  version: 0.0.0
  dist-name: x

jobs:
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX
          # - StandaloneWindows # Who uses 32-bit anymore?
          # - StandaloneWindows64
          # - StandaloneLinux64
          # - iOS
          # - Android
        include:
          - targetPlatform: StandaloneOSX
            platform: macos-latest
            name: universal-macos
            suffix: .dmg
          # - targetPlatform: StandaloneWindows64
          #   platform: ubuntu-latest
          #   name: x86_64-windows
          #   suffix: .zip
          # - targetPlatform: StandaloneLinux64
          #   platform: ubuntu-latest
          #   name: x86_64-linux
          #   suffix: .tar.gz
          - targetPlatform: iOS
            platform: macos-latest
            name: ios
            suffix: ''
            # if: env.preview == 'false' && env.pre-release == 'false'
          # - targetPlatform: Android
          #   platform: ubuntu-latest
          #   name: android
          #   suffix: .apk
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Initialize version
      #   shell: bash
      #   run: |
      #     if [[ $GITHUB_REF == refs/tags/* ]]; then
      #       echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      #     else
      #       echo "version=dev${GITHUB_SHA::7}" >> $GITHUB_ENV
      #     fi

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-
      
      - if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1

      - name: Build
        id: buildStep
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          versioning: ${{ env.preview != 'true' && 'Tag' || 'Custom' }}
          version: ${{ env.preview == 'true' && env.version || '' }}
          customParameters: -CompressWithLz4

      - run: |
          echo 'Project Version ${{ steps.buildStep.outputs.buildVersion }}'
          echo 'Android Version Code ${{ steps.buildStep.outputs.androidVersionCode }}'
          echo 'Build Step Exit Code ${{ steps.buildStep.outputs.engineExitCode }}'

      - run: mkdir dist

      - name: Create dmg
        if: matrix.targetPlatform == 'StandaloneOSX'
        uses: L-Super/create-dmg-actions@v1.0.3
        with:
          dmg_name: 'REFRACTION-${{ env.version }}-${{ matrix.name }}'
          src_dir: 'build/StandaloneOSX/StandaloneOSX.app'
        
      - if: matrix.targetPlatform == 'StandaloneOSX'
        run: |
          cp -r REFRACTION-${{ env.version }}-${{ matrix.name }}.dmg dist/REFRACTION-${{ env.version }}-${{ matrix.name }}.dmg
      - if: matrix.targetPlatform == 'StandaloneWindows64'
        run: |
          cd build/StandaloneWindows64
          7z a -r ../dist/REFRACTION-${{ env.version }}-${{ matrix.name }}.zip .
      - if: matrix.targetPlatform == 'StandaloneLinux64'
        run: |
          tar -czvf dist/REFRACTION-${{ env.version }}-${{ matrix.name }}.tar.gz build/StandaloneLinux64
      - if: matrix.targetPlatform == 'iOS'
        run: |
          cp -r build/iOS dist/REFRACTION-${{ env.version }}-${{ matrix.name }}
      - if: matrix.targetPlatform == 'Android'
        run: |
          cp build/Android/Android.apk dist/REFRACTION-${{ env.version }}-${{ matrix.name }}.apk

      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: Build ${{ matrix.targetPlatform }}
      #     path: build/${{ matrix.targetPlatform }}
      
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.dist-name }}
          path: dist/REFRACTION-${{ env.dist-name }}-${{ matrix.name }}${{ matrix.suffix }}
  # release:
  #   name: Release
  #   needs: [ buildForAllSupportedPlatforms ]
  #   if: startsWith(github.ref, 'refs/tags/')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         lfs: true
      
  #     - uses: actions/download-artifact@v4

  #     - name: Build archive
  #       shell: bash
  #       run: |
  #         set -ex

  #         source="$(pwd)"
  #         cd "$(mktemp -d)"
  #         mv $source/bin-* .
  #         mkdir dist

  #         for dir in bin-* ; do
  #             platform=${dir#"bin-"}
  #             if [[ $platform =~ "windows" ]]; then
  #                 exe=".exe"
  #             fi
  #             pkgname=ice-${{ env.version }}-$platform
  #             mkdir -p $pkgname
  #             mv bin-$platform/ice$exe $pkgname
  #             chmod +x $pkgname/ice$exe

  #             if [ "$exe" = "" ]; then
  #                 tar cJf dist/$pkgname.tar.xz $pkgname
  #             else
  #                 7z a -r dist/$pkgname.zip $pkgname
  #             fi
  #         done

  #         mv dist $source/

  #     - name: 

